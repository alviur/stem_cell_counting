name: "FCRN_B"
layer {
  name: "data"
  type: "HDF5Data"
  top: "data"
  top: "label"
  hdf5_data_param {
    source: "/home/lex/MEGAsync/1_MSE/1_Algorithms/FCRN/2_Caffe/Xie_architectures/FCRN_B/trainPointerFCRN_B.txt"
    batch_size: 30
  }
  include: { phase: TRAIN }
}
layer {
  name: "data"
  type: "HDF5Data"
  top: "data"
  top: "label"
  hdf5_data_param {
    source: "/home/lex/MEGAsync/1_MSE/1_Algorithms/FCRN/2_Caffe/Xie_architectures/FCRN_B/trainPointerFCRN_B.txt"
    batch_size: 30
  }
  include: { phase: TEST }
}

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 0.1
  }
  convolution_param {
    num_output: 32
    pad_w: 1
    pad_h: 1
    kernel_w: 3
    kernel_h: 3
    stride_w: 1
    stride_h: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}



layer {
  name: "conv2"
  type: "Convolution"
  bottom: "conv1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.1
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}

layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2 # 
    stride: 2      
  }
}


layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool1"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.1
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}

layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv3"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2 # 
    stride: 2      
  }
}



layer {
  name: "conv4"
  type: "Convolution"
  bottom: "pool2"
  top: "conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.1
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}



layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.1
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}


layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}

######## Upsampling################

layer {
  name: "upsample1" 
  type: "Deconvolution"
  bottom: "conv5" 
  top: "upsample1"
  convolution_param {
    kernel_size: 2 
    stride: 2
    num_output: 256
    pad: 0
    weight_filler {
      type: "gaussian"
      std: 0.1
    }
    #bias_term: false
  }
  param { lr_mult: 1 decay_mult: 0.5 }
}

layer {
  name: "relu5"
  type: "ReLU"
  bottom: "upsample1"
  top: "upsample1"
}

layer {
  name: "upsample2" 
  type: "Deconvolution"
  bottom: "upsample1" 
  top: "upsample2"
  convolution_param {
    kernel_size: 2 
    stride: 2
    num_output: 1
    pad: 0
    weight_filler {
      type: "gaussian"
      std: 0.1
    }
    #bias_term: false
  }
  param { lr_mult: 1 decay_mult: 0.5 }
}


layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "upsample2"
  bottom: "label"
  top: "loss"
}



